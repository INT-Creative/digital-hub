---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout 
  title="Client Portal - INT Creative"
  description="Secure client portal to track project progress, view deliverables, and communicate with the INT Creative team."
>
  <main class="min-h-screen bg-gray-50">
    <!-- Login Form (Initially Visible) -->
    <div id="login-form" class="min-h-screen flex items-center justify-center px-6 py-12">
      <div class="bg-white shadow-lg rounded-2xl p-8 w-full max-w-md">
        <div class="text-center mb-8">
          <div class="inline-flex items-center justify-center w-16 h-16 bg-forest-green rounded-2xl mb-4">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
            </svg>
          </div>
          <h1 class="text-2xl font-bold text-gray-900 font-heading">Client Portal</h1>
          <p class="text-gray-600 font-body">Access your project dashboard</p>
        </div>

        <form id="portal-login" class="space-y-6">
          <div>
            <label for="client_id" class="block text-sm font-medium text-gray-700 mb-2 font-section">
              Client ID
            </label>
            <input 
              type="text" 
              id="client_id" 
              name="client_id"
              required
              class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-forest-green focus:border-transparent font-body"
              placeholder="e.g., john-doe"
            />
          </div>

          <div>
            <label for="password" class="block text-sm font-medium text-gray-700 mb-2 font-section">
              Password
            </label>
            <input 
              type="password" 
              id="password" 
              name="password"
              required
              class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-forest-green focus:border-transparent font-body"
              placeholder="Your secure password"
            />
          </div>

          <button 
            type="submit"
            class="w-full bg-forest-green text-white py-3 px-6 rounded-xl font-medium hover:bg-forest-green/90 transition-colors font-section focus:outline-none focus:ring-2 focus:ring-forest-green focus:ring-offset-2"
          >
            Access Dashboard
          </button>
        </form>

        <div class="mt-8 text-center">
          <p class="text-sm text-gray-500 font-body">
            Need help accessing your portal?
            <a href="/contact" class="text-forest-green hover:text-forest-green/80 font-medium">
              Contact Support
            </a>
          </p>
        </div>
      </div>
    </div>

    <!-- Dashboard (Initially Hidden) -->
    <div id="dashboard" class="hidden">
      <!-- Header -->
      <header class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-6 py-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <div class="w-10 h-10 bg-forest-green rounded-xl flex items-center justify-center">
                <span class="text-white font-bold font-section text-lg">IC</span>
              </div>
              <div>
                <h1 class="text-xl font-bold text-gray-900 font-heading">Welcome back, <span id="client-name"></span></h1>
                <p class="text-sm text-gray-600 font-body" id="client-company"></p>
              </div>
            </div>
            <button 
              id="logout-btn"
              class="px-4 py-2 text-gray-600 hover:text-gray-900 transition-colors font-section"
            >
              Sign Out
            </button>
          </div>
        </div>
      </header>

      <div class="max-w-7xl mx-auto px-6 py-8">
        <!-- Dashboard Summary -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div class="bg-white p-6 rounded-2xl shadow-sm">
            <div class="flex items-center">
              <div class="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center">
                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600 font-section">Total Projects</p>
                <p class="text-2xl font-bold text-gray-900 font-heading" id="total-projects">-</p>
              </div>
            </div>
          </div>

          <div class="bg-white p-6 rounded-2xl shadow-sm">
            <div class="flex items-center">
              <div class="w-12 h-12 bg-yellow-100 rounded-xl flex items-center justify-center">
                <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600 font-section">In Progress</p>
                <p class="text-2xl font-bold text-gray-900 font-heading" id="active-projects">-</p>
              </div>
            </div>
          </div>

          <div class="bg-white p-6 rounded-2xl shadow-sm">
            <div class="flex items-center">
              <div class="w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center">
                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600 font-section">Completed</p>
                <p class="text-2xl font-bold text-gray-900 font-heading" id="completed-projects">-</p>
              </div>
            </div>
          </div>

          <div class="bg-white p-6 rounded-2xl shadow-sm">
            <div class="flex items-center">
              <div class="w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center">
                <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"/>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600 font-section">Avg Progress</p>
                <p class="text-2xl font-bold text-gray-900 font-heading" id="avg-progress">-</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Projects List -->
        <div class="bg-white rounded-2xl shadow-sm">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-900 font-heading">Your Projects</h2>
          </div>
          <div id="projects-list" class="divide-y divide-gray-200">
            <!-- Projects will be loaded here -->
            <div class="p-6 text-center">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-forest-green mx-auto"></div>
              <p class="mt-2 text-gray-600 font-body">Loading your projects...</p>
            </div>
          </div>
        </div>

        <!-- Next Milestones -->
        <div class="mt-8 bg-white rounded-2xl shadow-sm">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-900 font-heading">Upcoming Milestones</h2>
          </div>
          <div id="milestones-list" class="p-6">
            <!-- Milestones will be loaded here -->
            <div class="text-center">
              <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-forest-green mx-auto"></div>
              <p class="mt-2 text-sm text-gray-600 font-body">Loading milestones...</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Error Messages -->
    <div id="error-message" class="hidden fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg">
      <p class="font-medium font-section" id="error-text"></p>
    </div>

    <div id="success-message" class="hidden fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg">
      <p class="font-medium font-section" id="success-text"></p>
    </div>
  </main>
</BaseLayout>

<script>
  // Client Portal JavaScript
  document.addEventListener('DOMContentLoaded', function() {
    const loginForm = document.getElementById('login-form');
    const dashboard = document.getElementById('dashboard');
    const portalLoginForm = document.getElementById('portal-login');
    const logoutBtn = document.getElementById('logout-btn');
    
    let currentToken = '';

    // Check for existing session
    checkExistingSession();

    // Login form submission
    portalLoginForm?.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const credentials = {
        action: 'login',
        client_id: formData.get('client_id'),
        password: formData.get('password')
      };

      try {
        showMessage('Signing in...', 'info');
        
        const response = await fetch('/api/client-portal', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(credentials)
        });

        const result = await response.json();

        if (result.success) {
          currentToken = result.token;
          localStorage.setItem('client_token', currentToken);
          
          // Update client info
          document.getElementById('client-name').textContent = result.client.name;
          document.getElementById('client-company').textContent = result.client.company;
          
          // Switch to dashboard
          loginForm.style.display = 'none';
          dashboard.classList.remove('hidden');
          
          // Load dashboard data
          loadDashboardData();
          
          showMessage('Welcome back!', 'success');
        } else {
          showMessage(result.error || 'Login failed', 'error');
        }
      } catch (error) {
        showMessage('Network error. Please try again.', 'error');
        console.error('Login error:', error);
      }
    });

    // Logout functionality
    logoutBtn?.addEventListener('click', async function() {
      try {
        await fetch('/api/client-portal', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${currentToken}`
          },
          body: JSON.stringify({ action: 'logout' })
        });
      } catch (error) {
        console.error('Logout error:', error);
      }
      
      // Clear local data
      localStorage.removeItem('client_token');
      currentToken = '';
      
      // Switch to login form
      dashboard.classList.add('hidden');
      loginForm.style.display = 'flex';
      
      showMessage('Signed out successfully', 'success');
    });

    // Check for existing session
    async function checkExistingSession() {
      const token = localStorage.getItem('client_token');
      if (!token) return;

      try {
        const response = await fetch('/api/client-portal?data=profile', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        const result = await response.json();

        if (result.success) {
          currentToken = token;
          
          // Update client info
          document.getElementById('client-name').textContent = result.profile.name;
          document.getElementById('client-company').textContent = result.profile.company;
          
          // Switch to dashboard
          loginForm.style.display = 'none';
          dashboard.classList.remove('hidden');
          
          // Load dashboard data
          loadDashboardData();
        } else {
          localStorage.removeItem('client_token');
        }
      } catch (error) {
        localStorage.removeItem('client_token');
        console.error('Session check error:', error);
      }
    }

    // Load dashboard data
    async function loadDashboardData() {
      try {
        // Load dashboard summary
        const summaryResponse = await fetch('/api/client-portal', {
          headers: {
            'Authorization': `Bearer ${currentToken}`
          }
        });

        const summaryResult = await summaryResponse.json();

        if (summaryResult.success) {
          const summary = summaryResult.dashboard.summary;
          document.getElementById('total-projects').textContent = summary.total_projects;
          document.getElementById('active-projects').textContent = summary.active_projects;
          document.getElementById('completed-projects').textContent = summary.completed_projects;
          document.getElementById('avg-progress').textContent = summary.average_progress + '%';

          // Load projects
          loadProjects();
          
          // Load milestones
          loadMilestones(summaryResult.dashboard.next_milestones);
        }
      } catch (error) {
        console.error('Dashboard data error:', error);
        showMessage('Failed to load dashboard data', 'error');
      }
    }

    // Load projects list
    async function loadProjects() {
      try {
        const response = await fetch('/api/client-portal?data=projects', {
          headers: {
            'Authorization': `Bearer ${currentToken}`
          }
        });

        const result = await response.json();

        if (result.success) {
          const projectsList = document.getElementById('projects-list');
          projectsList.innerHTML = '';

          result.projects.forEach(project => {
            const projectElement = createProjectElement(project);
            projectsList.appendChild(projectElement);
          });
        }
      } catch (error) {
        console.error('Projects load error:', error);
        document.getElementById('projects-list').innerHTML = '<p class="text-center text-gray-600 p-6">Failed to load projects</p>';
      }
    }

    // Create project element
    function createProjectElement(project) {
      const div = document.createElement('div');
      div.className = 'p-6';
      
      const statusColors = {
        'planning': 'bg-gray-100 text-gray-800',
        'in-progress': 'bg-blue-100 text-blue-800',
        'review': 'bg-yellow-100 text-yellow-800',
        'completed': 'bg-green-100 text-green-800'
      };

      div.innerHTML = `
        <div class="flex items-center justify-between mb-4">
          <div>
            <h3 class="text-lg font-semibold text-gray-900 font-heading">${project.name}</h3>
            <p class="text-sm text-gray-600 font-body">${project.description}</p>
          </div>
          <div class="text-right">
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium font-section ${statusColors[project.status] || 'bg-gray-100 text-gray-800'}">
              ${project.status.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}
            </span>
            <p class="text-sm text-gray-600 mt-1 font-body">${project.timeline}</p>
          </div>
        </div>
        
        <div class="mb-4">
          <div class="flex items-center justify-between text-sm mb-2">
            <span class="text-gray-600 font-section">Progress</span>
            <span class="text-gray-900 font-bold font-section">${project.progress}%</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2">
            <div class="bg-forest-green h-2 rounded-full transition-all duration-300" style="width: ${project.progress}%"></div>
          </div>
        </div>

        <div class="mb-4">
          <h4 class="text-sm font-medium text-gray-700 mb-2 font-section">Deliverables:</h4>
          <div class="space-y-1">
            ${project.deliverables.map(deliverable => {
              const isCompleted = deliverable.startsWith('✅');
              const isInProgress = deliverable.startsWith('🔄');
              const textClass = isCompleted ? 'text-green-600' : isInProgress ? 'text-blue-600' : 'text-gray-600';
              return `<p class="text-sm ${textClass} font-body">${deliverable}</p>`;
            }).join('')}
          </div>
        </div>

        <div class="flex items-center justify-between text-xs text-gray-500">
          <span>Budget: ${project.budget}</span>
          <span>Updated: ${new Date(project.last_updated).toLocaleDateString()}</span>
        </div>
      `;

      return div;
    }

    // Load milestones
    function loadMilestones(milestones) {
      const milestonesList = document.getElementById('milestones-list');
      
      if (!milestones || milestones.length === 0) {
        milestonesList.innerHTML = '<p class="text-gray-600 font-body">No upcoming milestones</p>';
        return;
      }

      milestonesList.innerHTML = '';
      
      milestones.forEach(milestone => {
        const div = document.createElement('div');
        div.className = 'flex items-center justify-between p-4 bg-gray-50 rounded-xl mb-3';
        
        div.innerHTML = `
          <div>
            <h4 class="font-medium text-gray-900 font-section">${milestone.project}</h4>
            <p class="text-sm text-gray-600 font-body">Status: ${milestone.status.replace('-', ' ')}</p>
          </div>
          <div class="text-right">
            <p class="text-sm font-medium text-gray-900 font-section">${milestone.timeline}</p>
            <p class="text-xs text-gray-600 font-body">${milestone.progress}% complete</p>
          </div>
        `;
        
        milestonesList.appendChild(div);
      });
    }

    // Show message function
    function showMessage(text, type) {
      const errorEl = document.getElementById('error-message');
      const successEl = document.getElementById('success-message');
      
      // Hide all messages first
      errorEl.classList.add('hidden');
      successEl.classList.add('hidden');
      
      if (type === 'error') {
        document.getElementById('error-text').textContent = text;
        errorEl.classList.remove('hidden');
        setTimeout(() => errorEl.classList.add('hidden'), 5000);
      } else if (type === 'success') {
        document.getElementById('success-text').textContent = text;
        successEl.classList.remove('hidden');
        setTimeout(() => successEl.classList.add('hidden'), 3000);
      }
      // 'info' type just logs to console for now
      console.log(`[${type.toUpperCase()}] ${text}`);
    }
  });
</script>

<style>
  /* Custom styles for the client portal */
  .font-heading {
    font-family: 'Playfair Display', serif;
  }
  
  .font-section {
    font-family: 'Montserrat Alternates', sans-serif;
  }
  
  .font-body {
    font-family: 'Inter', sans-serif;
  }
  
  .bg-forest-green {
    background-color: rgb(15, 47, 32);
  }
  
  .text-forest-green {
    color: rgb(15, 47, 32);
  }
  
  .border-forest-green {
    border-color: rgb(15, 47, 32);
  }
  
  .ring-forest-green {
    --tw-ring-color: rgb(15, 47, 32);
  }

  .focus\:ring-forest-green:focus {
    --tw-ring-color: rgb(15, 47, 32);
  }

  .hover\:bg-forest-green\/90:hover {
    background-color: rgb(15, 47, 32, 0.9);
  }

  .hover\:text-forest-green\/80:hover {
    color: rgb(15, 47, 32, 0.8);
  }
</style>